{"version":3,"file":"static/js/336.84961353.chunk.js","mappings":"2QAEMA,EAAWC,EAAAA,GAAAA,GAAH,2FAMRC,EAAUD,EAAAA,GAAAA,IAAH,2D,SCmDb,EApDa,WACX,IAAQE,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA4BE,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAkCF,EAAAA,EAAAA,UAAS,MAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAuBA,IArBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,8GAEKC,EAAAA,EAAAA,IAAaT,EAAS,YAF3B,OAERU,EAFQ,OAGdN,EAAUM,GAHI,gDAKdC,QAAQC,IAAI,KAAMC,SALJ,yDAAH,qDAQTC,EAAM,mCAAG,8GAEWC,EAAAA,EAAAA,MAFX,OAELC,EAFK,OAGXV,EAAaU,EAAQF,QAHV,gDAKXH,QAAQC,IAAI,KAAMC,SALP,yDAAH,qDAQZC,IACAN,GACD,GAAE,CAACR,KAECG,EACH,OAAO,KAET,IAAKE,EACH,OAAO,KAGT,IAAQY,EAASd,EAATc,KACAC,EAAab,EAAba,SAER,OACE,SAACrB,EAAD,UACGoB,EAAKE,KAAI,gBAAGC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,cAAeC,EAA7B,EAA6BA,aAAcC,EAA3C,EAA2CA,GAA3C,OACR,4BACE,SAACxB,EAAD,CACEyB,IAAG,UAAKN,EAAL,oBAAyBI,GAC5BG,IAAKJ,KAEP,uBAAID,KACJ,uBAAIC,MANIE,EADF,KAYf,C","sources":["components/Cast/CastStyled.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nconst CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n  padding: 0;\n`;\nconst CastImg = styled.img`\n  width: 150px;\n  height: 150px;\n`;\nexport { CastList, CastImg };\n","import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { getMovieById } from '../../serviceApi/getMoviesApi';\nimport { CastList, CastImg } from './CastStyled';\nimport { getImages } from '../../serviceApi/getMoviesApi';\nimport PropTypes from 'prop-types';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [actors, setActors] = useState(null);\n  const [imageData, setImageData] = useState(null);\n\n  useEffect(() => {\n    const getActors = async () => {\n      try {\n        const data = await getMovieById(movieId, '/credits');\n        setActors(data);\n      } catch (error) {\n        console.log(error.message);\n      }\n    };\n    const images = async () => {\n      try {\n        const dataImg = await getImages();\n        setImageData(dataImg.images);\n      } catch (error) {\n        console.log(error.message);\n      }\n    };\n    images();\n    getActors();\n  }, [movieId]);\n\n  if (!actors) {\n    return null;\n  }\n  if (!imageData) {\n    return null;\n  }\n\n  const { cast } = actors;\n  const { base_url } = imageData;\n\n  return (\n    <CastList>\n      {cast.map(({ character, original_name, profile_path, id }) => (\n        <div key={id}>\n          <CastImg\n            src={`${base_url}/original${profile_path}`}\n            alt={original_name}\n          />\n          <p>{character}</p>\n          <p>{original_name}</p>\n        </div>\n      ))}\n    </CastList>\n  );\n};\n\nexport default Cast;\nCast.propTypes = {\n  movieId: PropTypes.string.isRequired,\n};\n"],"names":["CastList","styled","CastImg","movieId","useParams","useState","actors","setActors","imageData","setImageData","useEffect","getActors","getMovieById","data","console","log","message","images","getImages","dataImg","cast","base_url","map","character","original_name","profile_path","id","src","alt"],"sourceRoot":""}