{"version":3,"file":"static/js/804.212287b3.chunk.js","mappings":"6RAEMA,EAAcC,EAAAA,GAAAA,IAAH,yCAGXC,EAAmBD,EAAAA,GAAAA,IAAH,qEAIhBE,EAAYF,EAAAA,GAAAA,IAAH,wDAITG,EAAUH,EAAAA,GAAAA,IAAH,yKAUPI,EAASJ,EAAAA,GAAAA,OAAH,+MAUNK,EAASL,EAAAA,GAAAA,IAAH,2IAQNM,GAAcN,EAAAA,EAAAA,IAAOO,EAAAA,GAAPP,CAAH,iR,SCAjB,EAhCkB,SAAC,GAA0B,IAAxBQ,EAAuB,EAAvBA,UAAWC,EAAY,EAAZA,MACtBC,EAA6DD,EAA7DC,MAAOC,EAAsDF,EAAtDE,aAAcC,EAAwCH,EAAxCG,aAAcC,EAA0BJ,EAA1BI,SAAUC,EAAgBL,EAAhBK,YAC7CC,EAAaP,EAAbO,SACR,OACE,UAACb,EAAD,YACE,SAACH,EAAD,WACE,gBAAKiB,IAAG,UAAKD,EAAL,oBAAyBD,GAAeG,IAAKP,OAEvD,UAACT,EAAD,YACE,UAACE,EAAD,YACE,0BACGO,EADH,KACYC,EADZ,QAGA,2CAAmBC,SAErB,UAACT,EAAD,YACE,sCACA,uBAAIU,QAEN,UAACV,EAAD,YACE,oCACA,SAACE,EAAD,UACGI,EAAMS,OAAOC,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OAChB,uBAAeA,GAAPA,EADQ,cAQ7B,ECwBD,EAzDsB,WAAO,IAAD,EAClBC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BE,EAAAA,EAAAA,UAAS,MAAnC,eAAOd,EAAP,KAAce,EAAd,KACA,GAAkCD,EAAAA,EAAAA,UAAS,MAA3C,eAAOf,EAAP,KAAkBiB,EAAlB,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACXC,GAAgBC,EAAAA,EAAAA,QAAM,UAACL,EAASM,aAAV,aAAC,EAAgBC,MAwB7C,IAtBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,8GAEEC,EAAAA,EAAAA,IAAaf,EAAS,IAFxB,OAEXgB,EAFW,OAGjBb,EAASa,GAHQ,gDAKjBC,QAAQC,IAAI,KAAMC,SALD,yDAAH,qDASZC,EAAM,mCAAG,8GAEWC,EAAAA,EAAAA,MAFX,OAELC,EAFK,OAGXlB,EAAakB,EAAQF,QAHV,gDAKXH,QAAQC,IAAI,KAAMC,SALP,yDAAH,qDAQZC,IACAN,GACD,GAAE,CAACd,KAECZ,IAAUD,EACb,OAAO,KAOT,OACE,iCACE,SAACJ,EAAD,CAAQwC,QANS,WACnBhB,EAASE,EAAce,QACxB,EAIkCC,KAAK,SAApC,sBAIA,SAAC,EAAD,CAAWrC,MAAOA,EAAOD,UAAWA,KACpC,4BACE,mBACA,mDACA,SAACF,EAAD,CAAayC,GAAG,OAAhB,mBACA,SAACzC,EAAD,CAAayC,GAAG,UAAhB,sBACA,sBAEF,SAAC,KAAD,MAGL,C,+IC1DKC,EAAU,mCAEVC,EAAWC,EAAAA,EAAAA,OAAa,CAAEC,QAHf,iCAUJC,EAAe,mCAAG,WAAMC,GAAN,uFACVJ,EAASK,IAAT,gCACQN,EADR,kBACyBK,EADzB,+CADU,cACvBhB,EADuB,yBAItBA,EAAKA,MAJiB,2CAAH,sDAOfD,EAAY,mCAAG,WAAOf,EAASkC,GAAhB,uFACPN,EAASK,IAAT,iBACPjC,GADO,OACGkC,EADH,oBACmBP,IAFZ,cACpBX,EADoB,yBAInBA,EAAKA,MAJc,2CAAH,wDAOZK,EAAS,mCAAG,oGACJO,EAASK,IAAT,iCAAuCN,IADnC,cACjBX,EADiB,yBAEhBA,EAAKA,MAFW,2CAAH,oD","sources":["pages/MoviesDetails/MoviesDetailsStyled.jsx","components/MovieInfo/MovieInfo.jsx","pages/MoviesDetails/MoviesDetails.jsx","serviceApi/getMoviesApi.js"],"sourcesContent":["import { NavLink } from 'react-router-dom';\nimport styled from 'styled-components';\nconst ImageWraper = styled.div`\n  width: 250px;\n`;\nconst DetailsContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\nconst Container = styled.div`\n  display: flex;\n  gap: 20px;\n`;\nconst Wrapper = styled.div`\n  padding: 10px;\n  max-width: 700px;\n  border-radius: 4px;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  margin-bottom: 20px;\n`;\n\nconst Button = styled.button`\n  display: inline-block;\n  padding: 5px 8px;\n  border-radius: 4px;\n  background-color: #74f809;\n  color: white;\n  margin-bottom: 5px;\n  border: none;\n  text-decoration: none;\n`;\nconst Genres = styled.div`\n  display: flex;\n  padding: 10px;\n  border-radius: 4px;\n  display: flex;\n  gap: 20px;\n  margin-bottom: 20px;\n`;\nconst DetailsLink = styled(NavLink)`\n  display: inline-block;\n  padding: 5px 8px;\n  margin-top: 10px;\n  text-decoration: none;\n  color: black;\n  font-size: 18px;\n  font-weight: 600;\n\n  &.active {\n    background-color: #df4710;\n    color: white;\n    border-radius: 4px;\n  }\n`;\nexport {\n  ImageWraper,\n  DetailsContainer,\n  Container,\n  Wrapper,\n  Button,\n  Genres,\n  DetailsLink,\n};\n","import {\n  ImageWraper,\n  DetailsContainer,\n  Container,\n  Wrapper,\n  Genres,\n} from '../../pages/MoviesDetails/MoviesDetailsStyled';\nimport PropTypes from 'prop-types';\n\nconst MovieInfo = ({ imageData, movie }) => {\n  const { title, release_date, vote_average, overview, poster_path } = movie;\n  const { base_url } = imageData;\n  return (\n    <Container>\n      <ImageWraper>\n        <img src={`${base_url}/original${poster_path}`} alt={title} />\n      </ImageWraper>\n      <DetailsContainer>\n        <Wrapper>\n          <h2>\n            {title} ({release_date})\n          </h2>\n          <p>Vote Average : {vote_average}</p>\n        </Wrapper>\n        <Wrapper>\n          <h2>Owerview</h2>\n          <p>{overview}</p>\n        </Wrapper>\n        <Wrapper>\n          <h2>Genres</h2>\n          <Genres>\n            {movie.genres.map(({ name }) => (\n              <p key={name}>{name}</p>\n            ))}\n          </Genres>\n        </Wrapper>\n      </DetailsContainer>\n    </Container>\n  );\n};\n\nexport default MovieInfo;\n\nMovieInfo.propTypes = {\n  imageData: PropTypes.shape({\n    base_url: PropTypes.string.isRequired,\n  }).isRequired,\n  movie: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    release_date: PropTypes.string.isRequired,\n    vote_average: PropTypes.number.isRequired,\n    overview: PropTypes.string.isRequired,\n    poster_path: PropTypes.string.isRequired,\n    genres: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string.isRequired,\n      })\n    ).isRequired,\n  }).isRequired,\n};\n","import { useEffect, useState, useRef } from 'react';\nimport { Outlet, useLocation, useNavigate, useParams } from 'react-router-dom';\nimport { getMovieById, getImages } from '../../serviceApi/getMoviesApi';\nimport MovieInfo from '../../components/MovieInfo/MovieInfo';\nimport { Button, DetailsLink } from './MoviesDetailsStyled';\n\nconst MoviesDetails = () => {\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState(null);\n  const [imageData, setImageData] = useState(null);\n  const location = useLocation();\n  const navigate = useNavigate();\n  const savedNavigate = useRef(location.state?.from);\n\n  useEffect(() => {\n    const movieDetails = async () => {\n      try {\n        const data = await getMovieById(movieId, '');\n        setMovie(data);\n      } catch (error) {\n        console.log(error.message);\n      }\n    };\n\n    const images = async () => {\n      try {\n        const dataImg = await getImages();\n        setImageData(dataImg.images);\n      } catch (error) {\n        console.log(error.message);\n      }\n    };\n    images();\n    movieDetails();\n  }, [movieId]);\n\n  if (!movie || !imageData) {\n    return null;\n  }\n\n  const handleGoBack = () => {\n    navigate(savedNavigate.current);\n  };\n\n  return (\n    <>\n      <Button onClick={handleGoBack} type=\"button\">\n        Go Back\n      </Button>\n\n      <MovieInfo movie={movie} imageData={imageData} />\n      <div>\n        <hr />\n        <h2>Aditional information</h2>\n        <DetailsLink to=\"cast\">Cast</DetailsLink>\n        <DetailsLink to=\"reviews\">Reviews</DetailsLink>\n        <hr />\n      </div>\n      <Outlet />\n    </>\n  );\n};\n\nexport default MoviesDetails;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'f13d291a2e62abd75d768079816666c5';\n\nconst instance = axios.create({ baseURL: BASE_URL });\n\nexport const getTradingMovies = async () => {\n  const data = await instance.get(`/trending/all/day?api_key=${API_KEY}`);\n  return data.data;\n};\n\nexport const getSearchMovies = async value => {\n  const data = await instance.get(\n    `/search/movie?api_key=${API_KEY}&query=${value}&language=en-US&page=1&include_adult=false`\n  );\n  return data.data;\n};\n\nexport const getMovieById = async (movieId, info) => {\n  const data = await instance.get(\n    `/movie/${movieId}${info}?api_key=${API_KEY}`\n  );\n  return data.data;\n};\n\nexport const getImages = async () => {\n  const data = await instance.get(`/configuration?api_key=${API_KEY}`);\n  return data.data;\n};\n"],"names":["ImageWraper","styled","DetailsContainer","Container","Wrapper","Button","Genres","DetailsLink","NavLink","imageData","movie","title","release_date","vote_average","overview","poster_path","base_url","src","alt","genres","map","name","movieId","useParams","useState","setMovie","setImageData","location","useLocation","navigate","useNavigate","savedNavigate","useRef","state","from","useEffect","movieDetails","getMovieById","data","console","log","message","images","getImages","dataImg","onClick","current","type","to","API_KEY","instance","axios","baseURL","getSearchMovies","value","get","info"],"sourceRoot":""}